<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class modelsUserProxy extends \models\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function authenticate()
    {
        $this->__load();
        return parent::authenticate();
    }

    public function isAdmin()
    {
        $this->__load();
        return parent::isAdmin();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setPostCode($post_code)
    {
        $this->__load();
        return parent::setPostCode($post_code);
    }

    public function getPostCode()
    {
        $this->__load();
        return parent::getPostCode();
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setCountry(\models\Country $country)
    {
        $this->__load();
        return parent::setCountry($country);
    }

    public function getCountry()
    {
        $this->__load();
        return parent::getCountry();
    }

    public function setLanguage($language)
    {
        $this->__load();
        return parent::setLanguage($language);
    }

    public function getLanguage()
    {
        $this->__load();
        return parent::getLanguage();
    }

    public function setGroup(\models\UserGroup $group)
    {
        $this->__load();
        return parent::setGroup($group);
    }

    public function getGroup()
    {
        $this->__load();
        return parent::getGroup();
    }

    public function setUserGroup(\models\UserGroup $userGroup)
    {
        $this->__load();
        return parent::setUserGroup($userGroup);
    }

    public function getUserGroup()
    {
        $this->__load();
        return parent::getUserGroup();
    }

    public function addWishlist(\models\Wishlist $wishlist)
    {
        $this->__load();
        return parent::addWishlist($wishlist);
    }

    public function getWishlists()
    {
        $this->__load();
        return parent::getWishlists();
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }

    public function __call($method, $args)
    {
        $this->__load();
        return parent::__call($method, $args);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'username', 'password', 'email', 'country', 'language', 'post_code', 'user_group', 'wishlists');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}